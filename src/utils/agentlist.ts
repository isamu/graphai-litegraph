export const agentlist = {
  agents: [
    {
      agentId: "textInputAgent",
      name: "textInputAgent",
      url: "http://localhost:8085/agents/textInputAgent",
      description: "Text Input Agent",
      category: ["input"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [{ inputs: [], params: { message: "Enter your message to AI." }, result: "message from the user" }],
    },
    {
      agentId: "dataObjectMergeTemplateAgent",
      name: "dataObjectMergeTemplateAgent",
      url: "http://localhost:8085/agents/dataObjectMergeTemplateAgent",
      description: "Merge object",
      category: ["data"],
      author: "Satoshi Nakajima",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        { inputs: [{ content1: "hello" }, { content2: "test" }], params: {}, result: { content1: "hello", content2: "test" } },
        { inputs: [{ content1: "hello" }], params: {}, result: { content1: "hello" } },
        { inputs: [{ content: "hello1" }, { content: "hello2" }], params: {}, result: { content: "hello2" } },
        {
          inputs: [
            { a: 1, b: 1 },
            { a: 2, b: 2 },
            { a: 3, b: 0, c: 5 },
          ],
          params: {},
          result: { a: 3, b: 0, c: 5 },
        },
        {
          inputs: [{ a: { b: { c: { d: "e" } } } }, { b: { c: { d: { e: "f" } } } }, { b: { d: { e: { f: "g" } } } }],
          params: {},
          result: { a: { b: { c: { d: "e" } } }, b: { c: { d: { e: "f" } }, d: { e: { f: "g" } } } },
        },
      ],
    },
    {
      agentId: "groqAgent",
      name: "groqAgent",
      url: "http://localhost:8085/agents/groqAgent",
      description: "Groq Agent",
      category: ["llm"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [],
      inputs: {
        type: "object",
        properties: {
          model: { type: "string" },
          system: { type: "string" },
          tools: { type: "object" },
          tool_choice: { type: "any" },
          max_tokens: { type: "number" },
          verbose: { type: "boolean" },
          temperature: { type: "number" },
          stream: { type: "boolean" },
          prompt: { type: "string", description: "query string" },
          messages: { type: "any", description: "chat messages" },
        },
      },
      output: { type: "object" },
      stream: true,
    },
    {
      agentId: "slashGPTAgent",
      name: "slashGPTAgent",
      url: "http://localhost:8085/agents/slashGPTAgent",
      description: "Slash GPT Agent",
      category: ["llm"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        {
          inputs: [],
          params: { query: "Come up with ten business ideas for AI startup" },
          result: [
            { role: "user", content: "Come up with ten business ideas for AI startup", preset: false },
            {
              role: "assistant",
              content:
                "1. AI-powered personal shopping assistant that helps users find clothes that fit their style and budget.\n2. AI-powered health monitoring system that analyzes user data to provide personalized healthcare recommendations.\n3. AI-powered chatbot for customer service that can handle a variety of queries and provide quick responses.\n4. AI-powered virtual personal trainer that creates customized workout plans based on user goals and progress.\n5. AI-powered language translation service that can accurately translate text and voice in real-time.\n6. AI-powered financial advisor that analyzes user spending habits and offers personalized advice for saving and investing.\n7. AI-powered content creation platform that uses algorithms to generate engaging articles, videos, and social media posts.\n8. AI-powered job matching platform that connects job seekers with relevant opportunities based on their skills and experience.\n9. AI-powered cybersecurity solution that continuously monitors and protects against online threats and data breaches.\n10. AI-powered educational platform that uses personalized learning algorithms to help students improve their skills and knowledge in various subjects.",
              preset: false,
            },
          ],
        },
      ],
      stream: true,
    },
    {
      agentId: "openAIAgent",
      name: "openAIAgent",
      url: "http://localhost:8085/agents/openAIAgent",
      description: "Openai Agent",
      category: ["llm"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        {
          inputs: { prompt: "this is response result" },
          params: {},
          result: {
            object: "chat.completion",
            id: "chatcmpl-9N7HxXYbwjmdbdiQE94MHoVluQhyt",
            choices: [{ message: { role: "assistant", content: "this is response result" }, finish_reason: "stop", index: 0, logprobs: null }],
            created: 1715296589,
            model: "gpt-3.5-turbo-0125",
          },
        },
      ],
      inputs: {
        type: "object",
        properties: {
          model: { type: "string" },
          system: { type: "string" },
          tools: { type: "object" },
          tool_choice: { anyOf: [{ type: "array" }, { type: "object" }] },
          max_tokens: { type: "number" },
          verbose: { type: "boolean" },
          temperature: { type: "number" },
          baseURL: { type: "string" },
          apiKey: { anyOf: [{ type: "string" }, { type: "object" }] },
          stream: { type: "boolean" },
          prompt: { type: "string", description: "query string" },
          messages: { anyOf: [{ type: "string" }, { type: "object" }, { type: "array" }], description: "chat messages" },
        },
      },
      output: {
        type: "object",
        properties: {
          id: { type: "string" },
          object: { type: "string" },
          created: { type: "integer" },
          model: { type: "string" },
          choices: {
            type: "array",
            items: [
              {
                type: "object",
                properties: {
                  index: { type: "integer" },
                  message: {
                    type: "array",
                    items: [{ type: "object", properties: { content: { type: "string" }, role: { type: "string" } }, required: ["content", "role"] }],
                  },
                },
                required: ["index", "message", "logprobs", "finish_reason"],
              },
            ],
          },
          usage: {
            type: "object",
            properties: { prompt_tokens: { type: "integer" }, completion_tokens: { type: "integer" }, total_tokens: { type: "integer" } },
            required: ["prompt_tokens", "completion_tokens", "total_tokens"],
          },
        },
        required: ["id", "object", "created", "model", "choices", "usage"],
      },
      stream: true,
    },
    {
      agentId: "anthropicAgent",
      name: "anthropicAgent",
      url: "http://localhost:8085/agents/anthropicAgent",
      description: "Anthropic Agent",
      category: ["llm"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [],
      inputs: {
        type: "object",
        properties: {
          model: { type: "string" },
          system: { type: "string" },
          max_tokens: { type: "number" },
          temperature: { type: "number" },
          prompt: { type: "string", description: "query string" },
          messages: { type: "any", description: "chat messages" },
        },
      },
      output: { type: "object" },
    },
    {
      agentId: "geminiAgent",
      name: "geminiAgent",
      url: "http://localhost:8085/agents/geminiAgent",
      description: "Gemini Agent",
      category: ["llm"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [],
      inputs: {
        type: "object",
        properties: {
          model: { type: "string" },
          system: { type: "string" },
          tools: { type: "object" },
          max_tokens: { type: "number" },
          temperature: { type: "number" },
          prompt: { type: "string", description: "query string" },
          messages: { type: "any", description: "chat messages" },
        },
      },
      output: { type: "object" },
    },
    {
      agentId: "tokenBoundStringsAgent",
      name: "tokenBoundStringsAgent",
      url: "http://localhost:8085/agents/tokenBoundStringsAgent",
      description: "token bound Agent",
      category: [],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        {
          inputs: {
            chunks: [
              "Here's to the crazy ones. The misfits. The rebels. The troublemakers.",
              "The round pegs in the square holes. The ones who see things differently.",
              "They're not fond of rules. And they have no respect for the status quo.",
              "You can quote them, disagree with them, glorify or vilify them.",
              "About the only thing you can't do is ignore them.",
              "Because they change things.",
              "They push the human race forward.",
              "And while some may see them as the crazy ones, we see genius.",
              "Because the people who are crazy enough to think they can change the world, are the ones who do.",
            ],
          },
          params: { limit: 80 },
          result: {
            content:
              "Here's to the crazy ones. The misfits. The rebels. The troublemakers.\nThe round pegs in the square holes. The ones who see things differently.\nThey're not fond of rules. And they have no respect for the status quo.\nYou can quote them, disagree with them, glorify or vilify them.\nAbout the only thing you can't do is ignore them.\nBecause they change things.",
            tokenCount: 79,
            endIndex: 6,
          },
        },
      ],
      inputs: { type: "object", properties: { chunks: { type: "array", description: "an array of strings" } } },
      output: {
        type: "object",
        properties: {
          content: { type: "string", description: "token bound string" },
          tokenCount: { type: "number", description: "token count" },
          endIndex: { type: "number", description: "number of chunks" },
        },
      },
    },
    {
      agentId: "fetchAgent",
      name: "fetchAgent",
      url: "http://localhost:8085/agents/fetchAgent",
      description: "Retrieves JSON data from the specified URL",
      category: ["service"],
      author: "Receptron",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        {
          inputs: { url: "https://www.google.com", queryParams: { foo: "bar" }, headers: { "x-myHeader": "secret" } },
          params: { debug: true },
          result: { method: "GET", url: "https://www.google.com/?foo=bar", headers: { "x-myHeader": "secret" } },
        },
        {
          inputs: { url: "https://www.google.com", body: { foo: "bar" } },
          params: { debug: true },
          result: { method: "POST", url: "https://www.google.com/", headers: { "Content-Type": "application/json" }, body: '{"foo":"bar"}' },
        },
      ],
      inputs: {
        type: "object",
        properties: {
          url: { type: "string", description: "baseurl" },
          method: { type: "string", description: "HTTP method" },
          headers: { type: "object", description: "HTTP headers" },
          quaryParams: { type: "object", description: "Query parameters" },
          body: { anyOf: [{ type: "string" }, { type: "object" }], description: "body" },
        },
        required: ["url"],
      },
      output: { type: "array" },
    },
    {
      agentId: "wikipediaAgent",
      name: "wikipediaAgent",
      url: "http://localhost:8085/agents/wikipediaAgent",
      description: "Retrieves data from wikipedia",
      category: ["service"],
      author: "Receptron",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        {
          inputs: ["steve jobs"],
          params: { lang: "ja" },
          result: {
            content:
              "スティーブ・ジョブズ（英語: Steve Jobs、1955年2月24日 - 2011年10月5日）は、アメリカ合衆国の起業家、実業家、工業デザイナー。正式な氏名はスティーブン・ポール・ジョブズ（英語: Steven Paul Jobs）。アメリカ国家技術賞、大統領自由勲章を受賞している。\nAppleの共同創業者の一人であり、同社のCEOを務め、一切の妥協を許さないカリスマ的変革者として知られる。NeXTやピクサー・アニメーション・スタジオの創業者でもあり、ウォルト・ディズニー・カンパニーなどの役員を歴任した。AppleⅡなどによりパーソナルコンピュータ（パソコン）の概念を市場に普及させ、iPodとiTunes及びiTunes Storeによって音楽業界に変革をもたらし、iPhoneおよびiPadを世に送り出したと評された。\n\n\n== 略歴 ==\n1976年、ジョブズは友人のスティーブ・ウォズニアックが自作したマイクロコンピュータ「Apple I」を販売するために起業することを決意し、同年4月1日にウォズニアックおよびロナルド・ウェインとの共同で「Apple Computer Company（アップルコンピュータ・カンパニー）」を創業した。Apple Computer（以下Apple）が1977年に発売した「Apple II」は商業的な大成功を収め、パーソナルコンピュータという概念を世間一般に浸透させた。Appleはシリコンバレーを代表する企業に急成長を遂げ、ジョブズは1980年12月のApple IPO時に2億5,600万ドルもの個人資産を手にし、1982年2月には『タイム』誌の表紙を飾るなど若くして著名な起業家となった。\nその後、ジョブズは先進的なGUIやマウスを持つコンピュータ「Macintosh」の開発を主導した。1984年に発表されたMacintoshはマスコミから絶賛され当初は売れ行きも良く、ジョブズの名声を高めたが、発売から数カ月後には深刻な販売不振に陥り、Apple社内でのジョブズの地位を危ういものにした。1985年5月、ジョブズはCEOのジョン・スカリーによって全ての業務から解任されて閑職へと追いやられ、同年9月にはAppleを去った。\nApple退職後、ジョブズはルーカスフィルムのコンピュータ・アニメーション部門を1,000万ドルで買収し、ピクサー・アニメーション・スタジオを設立した。また、自ら創立したNeXT Computerで、NeXTワークステーション（NeXTcube, NeXTstation）とオペレーティングシステム（OS）NEXTSTEPを開発を指揮・主導した。\n1996年、業績不振に陥っていたAppleにNeXTを売却すると同時に復帰、1997年には、iCEO（暫定CEO、Interim CEOの略）となる。同年には、不倶戴天のライバルとさえされていたマイクロソフトとの提携と、同社からの支援を得ることに成功し、また社内ではリストラを進めてAppleの業績を向上させた。\n\n2000年、正式にCEOに就任。2001年から2003年にかけてMacのOSをNeXTの技術を基盤としたMac OS Xへと切り替える。その後はiPod・iPhone・iPad、Appleの業務範囲を従来のパソコンからデジタル家電とメディア配信事業へと拡大させた。一方で、2003年には膵臓がんと診断された。\nCEOに就任して以来、基本給与として年1ドルしか受け取っていなかったことで有名であり（実質的には無給与であるが、この1ドルという額は、居住地のカリフォルニア州法により、社会保障番号を受けるために給与証明が必要なことによる）、このため「世界でもっとも給与の安い最高経営責任者」と呼ばれた。しかし、無報酬ではなくAppleから莫大なストックオプションやビジネスジェット機などを得ている。2006年にピクサーをディズニーが74億ドルで買収したことにより、ピクサー株の50%を保有するジョブズはディズニーの個人筆頭株主となり同社の役員に就任したが、ディズニーからの役員報酬は辞退していた。\n2011年10月5日、膵臓がんにより死去。56歳没。\n2012年2月11日、第54回グラミー賞で、特別功労賞の一つ「トラスティーズ賞」が授与された。2022年7月7日にはアメリカ合衆国で文民に贈られる最高位の勲章である大統領自由勲章を追贈された。",
            ns: 0,
            title: "スティーブ・ジョブズ",
            pageid: 43967,
          },
        },
      ],
    },
    {
      agentId: "sleeperAgent",
      name: "sleeperAgent",
      url: "http://localhost:8085/agents/sleeperAgent",
      description: "sleeper Agent",
      category: ["sleeper"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [],
    },
    {
      agentId: "sleeperAgentDebug",
      name: "sleeperAgentDebug",
      url: "http://localhost:8085/agents/sleeperAgentDebug",
      description: "sleeper debug Agent",
      category: ["sleeper"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [],
    },
    {
      agentId: "stringEmbeddingsAgent",
      name: "stringEmbeddingsAgent",
      url: "http://localhost:8085/agents/stringEmbeddingsAgent",
      description: "Embeddings Agent",
      category: ["embedding"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [],
    },
    {
      agentId: "stringSplitterAgent",
      name: "stringSplitterAgent",
      url: "http://localhost:8085/agents/stringSplitterAgent",
      description: "This agent strip one long string into chunks using following parameters",
      category: ["string"],
      author: "Satoshi Nakajima",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        {
          inputs: {
            text: "Here's to the crazy ones, the misfits, the rebels, the troublemakers, the round pegs in the square holes ... the ones who see things differently -- they're not fond of rules, and they have no respect for the status quo. ... You can quote them, disagree with them, glorify or vilify them, but the only thing you can't do is ignore them because they change things. ... They push the human race forward, and while some may see them as the crazy ones, we see genius, because the people who are crazy enough to think that they can change the world, are the ones who do.",
          },
          params: { chunkSize: 64 },
          result: {
            contents: [
              "Here's to the crazy ones, the misfits, the rebels, the troublema",
              "roublemakers, the round pegs in the square holes ... the ones wh",
              " ones who see things differently -- they're not fond of rules, a",
              "rules, and they have no respect for the status quo. ... You can ",
              "You can quote them, disagree with them, glorify or vilify them, ",
              "y them, but the only thing you can't do is ignore them because t",
              "ecause they change things. ... They push the human race forward,",
              "forward, and while some may see them as the crazy ones, we see g",
              "we see genius, because the people who are crazy enough to think ",
              "o think that they can change the world, are the ones who do.",
              " do.",
            ],
            count: 11,
            chunkSize: 64,
            overlap: 8,
          },
        },
      ],
      inputs: { type: "object", properties: { text: { type: "string", description: "text to be chuncked" } }, required: ["text"] },
      output: {
        type: "object",
        properties: {
          contents: { type: "array", description: "the array of text chunks" },
          count: { type: "number", description: "the number of chunks" },
          chunkSize: { type: "number", description: "the chunk size" },
          overlap: { type: "number", description: "the overlap size" },
        },
      },
    },
    {
      agentId: "stringTemplateAgent",
      name: "stringTemplateAgent",
      url: "http://localhost:8085/agents/stringTemplateAgent",
      description: "Template agent",
      category: ["string"],
      author: "Satoshi Nakajima",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        { inputs: ["hello", "test"], params: { template: "${0}: ${1}" }, result: "hello: test" },
        { inputs: ["hello", "test"], params: { template: ["${0}: ${1}", "${1}: ${0}"] }, result: ["hello: test", "test: hello"] },
        { inputs: ["hello", "test"], params: { template: { apple: "${0}", lemon: "${1}" } }, result: { apple: "hello", lemon: "test" } },
        { inputs: ["hello", "test"], params: { template: [{ apple: "${0}", lemon: "${1}" }] }, result: [{ apple: "hello", lemon: "test" }] },
        { inputs: ["hello", "test"], params: { template: { apple: "${0}", lemon: ["${1}"] } }, result: { apple: "hello", lemon: ["test"] } },
      ],
    },
    {
      agentId: "jsonParserAgent",
      name: "jsonParserAgent",
      url: "http://localhost:8085/agents/jsonParserAgent",
      description: "Template agent",
      category: ["string"],
      author: "Satoshi Nakajima",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        { inputs: [{ apple: "red", lemon: "yellow" }], params: { stringify: true }, result: '{\n  "apple": "red",\n  "lemon": "yellow"\n}' },
        { inputs: ['{\n  "apple": "red",\n  "lemon": "yellow"\n}'], params: {}, result: { apple: "red", lemon: "yellow" } },
      ],
      inputs: { anyOf: [{ type: "string" }, { type: "integer" }, { type: "object" }, { type: "array" }] },
      output: { type: "string" },
    },
    {
      agentId: "pushAgent",
      name: "pushAgent",
      url: "http://localhost:8085/agents/pushAgent",
      description: "push Agent",
      category: ["array"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        { inputs: { array: [1, 2], item: 3 }, params: {}, result: [1, 2, 3] },
        { inputs: { array: [{ apple: 1 }], item: { lemon: 2 } }, params: {}, result: [{ apple: 1 }, { lemon: 2 }] },
      ],
      inputs: {
        type: "object",
        properties: {
          array: { type: "array", description: "the array to push an item to" },
          item: { anyOf: [{ type: "string" }, { type: "integer" }, { type: "object" }, { type: "array" }], description: "the item push into the array" },
        },
        required: ["array", "item"],
      },
      output: { type: "array" },
    },
    {
      agentId: "popAgent",
      name: "popAgent",
      url: "http://localhost:8085/agents/popAgent",
      description: "Pop Agent",
      category: ["array"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        { inputs: { array: [1, 2, 3] }, params: {}, result: { array: [1, 2], item: 3 } },
        { inputs: { array: ["a", "b", "c"] }, params: {}, result: { array: ["a", "b"], item: "c" } },
        { inputs: { array: [1, 2, 3], array2: ["a", "b", "c"] }, params: {}, result: { array: [1, 2], item: 3 } },
      ],
      inputs: { type: "object", properties: { array: { type: "array", description: "the array to pop an item from" } }, required: ["array"] },
      output: {
        type: "object",
        properties: {
          item: { anyOf: [{ type: "string" }, { type: "integer" }, { type: "object" }, { type: "array" }], description: "the item popped from the array" },
          array: { type: "array", description: "the remaining array" },
        },
      },
    },
    {
      agentId: "shiftAgent",
      name: "shiftAgent",
      url: "http://localhost:8085/agents/shiftAgent",
      description: "shift Agent",
      category: ["array"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        { inputs: { array: [1, 2, 3] }, params: {}, result: { array: [2, 3], item: 1 } },
        { inputs: { array: ["a", "b", "c"] }, params: {}, result: { array: ["b", "c"], item: "a" } },
      ],
      inputs: { type: "object", properties: { array: { type: "array", description: "the array to shift an item from" } }, required: ["array"] },
      output: {
        type: "object",
        properties: {
          item: { anyOf: [{ type: "string" }, { type: "integer" }, { type: "object" }, { type: "array" }], description: "the item shifted from the array" },
          array: { type: "array", description: "the remaining array" },
        },
      },
    },
    {
      agentId: "dotProductAgent",
      name: "dotProductAgent",
      url: "http://localhost:8085/agents/dotProductAgent",
      description: "dotProduct Agent",
      category: ["matrix"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        {
          inputs: {
            matrix: [
              [1, 2],
              [3, 4],
              [5, 6],
            ],
            vector: [3, 2],
          },
          params: {},
          result: [7, 17, 27],
        },
        {
          inputs: {
            matrix: [
              [1, 2],
              [2, 3],
            ],
            vector: [1, 2],
          },
          params: {},
          result: [5, 8],
        },
      ],
      inputs: {
        type: "object",
        properties: { matrix: { type: "array", description: "two dimentional matrix" }, vector: { type: "array", description: "the vector" } },
        required: ["matrix", "vector"],
      },
      output: { type: "array" },
    },
    {
      agentId: "sortByValuesAgent",
      name: "sortByValuesAgent",
      url: "http://localhost:8085/agents/sortByValuesAgent",
      description: "sortByValues Agent",
      category: ["matrix"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        { inputs: { array: ["banana", "orange", "lemon", "apple"], values: [2, 5, 6, 4] }, params: {}, result: ["lemon", "orange", "apple", "banana"] },
        {
          inputs: { array: ["banana", "orange", "lemon", "apple"], values: [2, 5, 6, 4] },
          params: { assendant: true },
          result: ["banana", "apple", "orange", "lemon"],
        },
      ],
      inputs: {
        type: "object",
        properties: {
          array: { type: "array", description: "the array to sort" },
          values: { type: "array", description: "values associated with items in the array" },
        },
        required: ["array", "values"],
      },
      output: { type: "array" },
    },
    {
      agentId: "echoAgent",
      name: "echoAgent",
      url: "http://localhost:8085/agents/echoAgent",
      description: "Echo agent",
      category: ["test"],
      author: "Satoshi Nakajima",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        { inputs: [], params: { message: "this is test" }, result: { message: "this is test" } },
        { inputs: [], params: { message: "If you add filterParams option, it will respond to filterParams", filterParams: true }, result: {} },
      ],
    },
    {
      agentId: "bypassAgent",
      name: "bypassAgent",
      url: "http://localhost:8085/agents/bypassAgent",
      description: "bypass agent",
      category: ["test"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        { inputs: [{ a: "123" }], params: {}, result: [{ a: "123" }] },
        {
          inputs: [
            [{ a: "123" }, { b: "abc" }],
            [{ c: "987" }, { d: "xyz" }],
          ],
          params: {},
          result: [
            [{ a: "123" }, { b: "abc" }],
            [{ c: "987" }, { d: "xyz" }],
          ],
        },
        {
          inputs: [
            [{ a: "123" }, { b: "abc" }],
            [{ c: "987" }, { d: "xyz" }],
          ],
          params: { firstElement: true },
          result: [{ a: "123" }, { b: "abc" }],
        },
        {
          inputs: [
            [{ a: "123" }, { b: "abc" }],
            [{ c: "987" }, { d: "xyz" }],
          ],
          params: { flat: 1 },
          result: [{ a: "123" }, { b: "abc" }, { c: "987" }, { d: "xyz" }],
        },
      ],
    },
    {
      agentId: "countingAgent",
      name: "countingAgent",
      url: "http://localhost:8085/agents/countingAgent",
      description: "Counting agent",
      category: ["test"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [{ inputs: [], params: { count: 4 }, result: { list: [0, 1, 2, 3] } }],
    },
    {
      agentId: "copyMessageAgent",
      name: "copyMessageAgent",
      url: "http://localhost:8085/agents/copyMessageAgent",
      description: "CopyMessage agent",
      category: ["test"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [{ inputs: [], params: { count: 4, message: "hello" }, result: { messages: ["hello", "hello", "hello", "hello"] } }],
    },
    {
      agentId: "copy2ArrayAgent",
      name: "copy2ArrayAgent",
      url: "http://localhost:8085/agents/copy2ArrayAgent",
      description: "Copy2Array agent",
      category: ["test"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        {
          inputs: [{ message: "hello" }],
          params: { count: 10 },
          result: [
            { message: "hello" },
            { message: "hello" },
            { message: "hello" },
            { message: "hello" },
            { message: "hello" },
            { message: "hello" },
            { message: "hello" },
            { message: "hello" },
            { message: "hello" },
            { message: "hello" },
          ],
        },
      ],
    },
    {
      agentId: "mergeNodeIdAgent",
      name: "mergeNodeIdAgent",
      url: "http://localhost:8085/agents/mergeNodeIdAgent",
      description: "merge node id agent",
      category: ["test"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [{ inputs: [{ message: "hello" }], params: {}, result: { message: "hello", test: "hello" } }],
    },
    {
      agentId: "streamMockAgent",
      name: "streamMockAgent",
      url: "http://localhost:8085/agents/streamMockAgent",
      description: "Stream mock agent",
      category: ["test"],
      author: "Isamu Arimoto",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        { inputs: [], params: { message: "this is params test" }, result: { message: "this is params test" } },
        { inputs: { message: "this is named inputs test" }, params: {}, result: { message: "this is named inputs test" } },
      ],
      inputs: { anyOf: [{ type: "object", properties: { message: { type: "string", description: "streaming message" } } }, { type: "array" }] },
      stream: true,
    },
    {
      agentId: "nestedAgent",
      name: "nestedAgent",
      url: "http://localhost:8085/agents/nestedAgent",
      description: "nested Agent",
      category: ["graph"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [],
    },
    {
      agentId: "mapAgent",
      name: "mapAgent",
      url: "http://localhost:8085/agents/mapAgent",
      description: "Map Agent",
      category: ["graph"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [],
    },
    {
      agentId: "workerAgent",
      name: "workerAgent",
      url: "http://localhost:8085/agents/workerAgent",
      description: "Map Agent",
      category: ["graph"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        {
          inputs: [],
          params: {},
          result: { message: "May the force be with you" },
          graph: {
            version: 0.3,
            nodes: { source: { value: "May the force be with you" }, message: { agent: "copyAgent", inputs: [":source"], isResult: true } },
          },
        },
        {
          inputs: ["May the force be with you"],
          params: {},
          result: { message: "May the force be with you" },
          graph: {
            version: 0.3,
            nodes: {
              source: { value: "TypeScript compiler fails without this node for some reason." },
              message: { agent: "copyAgent", inputs: [":$0"], isResult: true },
            },
          },
        },
      ],
    },
    {
      agentId: "totalAgent",
      name: "totalAgent",
      url: "http://localhost:8085/agents/totalAgent",
      description: "Returns the sum of input values",
      category: ["data"],
      author: "Satoshi Nakajima",
      license: "MIT",
      repository: "https://github.com/snakajima/graphai",
      samples: [
        { inputs: [{ a: 1 }, { a: 2 }, { a: 3 }], params: {}, result: { a: 6 } },
        { inputs: [[{ a: 1, b: -1 }, { c: 10 }], [{ a: 2, b: -1 }], [{ a: 3, b: -2 }, { d: -10 }]], params: {}, result: { a: 6, b: -4, c: 10, d: -10 } },
        { inputs: [{ a: 1 }], params: {}, result: { a: 1 } },
        { inputs: [{ a: 1 }, { a: 2 }], params: {}, result: { a: 3 } },
        { inputs: [{ a: 1 }, { a: 2 }, { a: 3 }], params: {}, result: { a: 6 } },
        {
          inputs: [
            { a: 1, b: 1 },
            { a: 2, b: 2 },
            { a: 3, b: 0 },
          ],
          params: {},
          result: { a: 6, b: 3 },
        },
        { inputs: [{ a: 1 }, { a: 2, b: 2 }, { a: 3, b: 0 }], params: {}, result: { a: 6, b: 2 } },
      ],
      inputs: { type: "array" },
      output: { type: "any" },
    },
    {
      agentId: "dataSumTemplateAgent",
      name: "dataSumTemplateAgent",
      url: "http://localhost:8085/agents/dataSumTemplateAgent",
      description: "Returns the sum of input values",
      category: ["data"],
      author: "Satoshi Nakajima",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        { inputs: [1], params: {}, result: 1 },
        { inputs: [1, 2], params: {}, result: 3 },
        { inputs: [1, 2, 3], params: {}, result: 6 },
      ],
      inputs: { type: "array" },
      output: { type: "number" },
    },
    {
      agentId: "propertyFilterAgent",
      name: "propertyFilterAgent",
      url: "http://localhost:8085/agents/propertyFilterAgent",
      description: "Filter properties based on property name either with 'include' or 'exclude'",
      category: ["data"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        {
          inputs: [{ color: "red", model: "Model 3", type: "EV", maker: "Tesla", range: 300 }],
          params: { include: ["color", "model"] },
          result: { color: "red", model: "Model 3" },
        },
        {
          inputs: [
            [
              { color: "red", model: "Model 3", type: "EV", maker: "Tesla", range: 300 },
              { color: "blue", model: "Model Y", type: "EV", maker: "Tesla", range: 400 },
            ],
            "Tesla Motors",
          ],
          params: { include: ["color", "model"] },
          result: [
            { color: "red", model: "Model 3" },
            { color: "blue", model: "Model Y" },
          ],
        },
        {
          inputs: [
            [
              { color: "red", model: "Model 3", type: "EV", maker: "Tesla", range: 300 },
              { color: "blue", model: "Model Y", type: "EV", maker: "Tesla", range: 400 },
            ],
            "Tesla Motors",
          ],
          params: { exclude: ["color", "model"] },
          result: [
            { type: "EV", maker: "Tesla", range: 300 },
            { type: "EV", maker: "Tesla", range: 400 },
          ],
        },
        {
          inputs: [
            [
              { color: "red", model: "Model 3", type: "EV", maker: "Tesla", range: 300 },
              { color: "blue", model: "Model Y", type: "EV", maker: "Tesla", range: 400 },
            ],
            "Tesla Motors",
          ],
          params: { alter: { color: { red: "blue", blue: "red" } } },
          result: [
            { color: "blue", model: "Model 3", type: "EV", maker: "Tesla", range: 300 },
            { color: "red", model: "Model Y", type: "EV", maker: "Tesla", range: 400 },
          ],
        },
        {
          inputs: [
            [
              { color: "red", model: "Model 3", type: "EV", maker: "Tesla", range: 300 },
              { color: "blue", model: "Model Y", type: "EV", maker: "Tesla", range: 400 },
            ],
            "Tesla Motors",
          ],
          params: { inject: [{ propId: "maker", from: 1 }] },
          result: [
            { color: "red", model: "Model 3", type: "EV", maker: "Tesla Motors", range: 300 },
            { color: "blue", model: "Model Y", type: "EV", maker: "Tesla Motors", range: 400 },
          ],
        },
        {
          inputs: [
            [
              { color: "red", model: "Model 3", type: "EV", maker: "Tesla", range: 300 },
              { color: "blue", model: "Model Y", type: "EV", maker: "Tesla", range: 400 },
            ],
            "Tesla Motors",
          ],
          params: { inject: [{ propId: "maker", from: 1, index: 0 }] },
          result: [
            { color: "red", model: "Model 3", type: "EV", maker: "Tesla Motors", range: 300 },
            { color: "blue", model: "Model Y", type: "EV", maker: "Tesla", range: 400 },
          ],
        },
        {
          inputs: [
            [
              { color: "red", model: "Model 3", type: "EV", maker: "Tesla", range: 300 },
              { color: "blue", model: "Model Y", type: "EV", maker: "Tesla", range: 400 },
            ],
            "Tesla Motors",
          ],
          params: { swap: { maker: "model" } },
          result: [
            { color: "red", model: "Tesla", type: "EV", maker: "Model 3", range: 300 },
            { color: "blue", model: "Tesla", type: "EV", maker: "Model Y", range: 400 },
          ],
        },
        {
          inputs: [
            [
              { color: "red", model: "Model 3", type: "EV", maker: "Tesla", range: 300 },
              { color: "blue", model: "Model Y", type: "EV", maker: "Tesla", range: 400 },
            ],
            "Tesla Motors",
          ],
          params: {
            inspect: [
              { propId: "isTesla", equal: "Tesla Motors" },
              { propId: "isGM", notEqual: "Tesla Motors", from: 1 },
            ],
          },
          result: [
            { color: "red", model: "Model 3", type: "EV", maker: "Tesla", range: 300, isTesla: true, isGM: false },
            { color: "blue", model: "Model Y", type: "EV", maker: "Tesla", range: 400, isTesla: true, isGM: false },
          ],
        },
      ],
      inputs: { type: "array" },
      output: { type: "any" },
    },
    {
      agentId: "copyAgent",
      name: "copyAgent",
      url: "http://localhost:8085/agents/copyAgent",
      description: "Returns inputs[0]",
      category: ["data"],
      author: "Receptron team",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        { inputs: [{ color: "red", model: "Model 3" }], params: {}, result: { color: "red", model: "Model 3" } },
        { inputs: ["Hello World", "Discarded"], params: {}, result: "Hello World" },
      ],
      inputs: { type: "array" },
      output: { type: "any" },
    },
    {
      agentId: "vanillaFetchAgent",
      name: "vanillaFetchAgent",
      url: "http://localhost:8085/agents/vanillaFetchAgent",
      description: "Retrieves JSON data from the specified URL",
      category: ["service"],
      author: "Receptron",
      license: "MIT",
      repository: "https://github.com/receptron/graphai",
      samples: [
        {
          inputs: { url: "https://www.google.com", queryParams: { foo: "bar" }, headers: { "x-myHeader": "secret" } },
          params: { debug: true },
          result: { method: "GET", url: "https://www.google.com/?foo=bar", headers: { "x-myHeader": "secret" } },
        },
        {
          inputs: { url: "https://www.google.com", body: { foo: "bar" } },
          params: { debug: true },
          result: { method: "POST", url: "https://www.google.com/", headers: { "Content-Type": "application/json" }, body: '{"foo":"bar"}' },
        },
      ],
      inputs: {
        type: "object",
        properties: {
          url: { type: "string", description: "baseurl" },
          method: { type: "string", description: "HTTP method" },
          headers: { type: "object", description: "HTTP headers" },
          quaryParams: { type: "object", description: "Query parameters" },
          body: { anyOf: [{ type: "string" }, { type: "object" }], description: "body" },
        },
        required: ["url"],
      },
      output: { type: "array" },
    },
    {
      agentId: "sampleAgent",
      name: "sampleAgent",
      url: "http://localhost:8085/agents/sampleAgent",
      description: "Sample agent",
      category: ["LLM"],
      author: "isamu arimoto",
      license: "MIT",
      repository: "https://github.com/isamu/graphai_doc",
      samples: [
        {
          inputs: [{ message: "hello" }, { message: "test" }],
          params: { sample: "123" },
          result: { inputs: [{ message: "hello" }, { message: "test" }], params: { sample: "123" } },
        },
      ],
    },
  ],
};
